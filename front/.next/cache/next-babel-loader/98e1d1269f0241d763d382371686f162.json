{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nexport const initialState = {\n  mainPosts: [{\n    user: {\n      id: 1,\n      nickname: 'ykwimk'\n    },\n    content: 'asdfdasf'\n  }]\n};\nconst ADD_POST = 'ADD_POST';\nconst ADD_DUMMY = 'ADD_DUMMY';\nconst addPostAction = {\n  type: ADD_POST\n};\nconst addDummyAction = {\n  type: ADD_DUMMY,\n  data: {\n    content: 'hello',\n    id: 1,\n    user: {\n      nickname: 'ykwimk'\n    }\n  }\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_POST:\n      {\n        return _objectSpread({}, state);\n      }\n\n    case ADD_DUMMY:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          mainPosts: [action.data, ...state.mainPosts]\n        });\n      }\n\n    default:\n      {\n        return _objectSpread({}, state);\n      }\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/robin/www/react-nodebird/front/reducers/post.js"],"names":["initialState","mainPosts","user","id","nickname","content","ADD_POST","ADD_DUMMY","addPostAction","type","addDummyAction","data","reducer","state","action"],"mappings":";;;;;;AAAA,OAAO,MAAMA,YAAY,GAAG;AAC1BC,EAAAA,SAAS,EAAE,CAAC;AACVC,IAAAA,IAAI,EAAE;AACJC,MAAAA,EAAE,EAAE,CADA;AAEJC,MAAAA,QAAQ,EAAE;AAFN,KADI;AAKVC,IAAAA,OAAO,EAAE;AALC,GAAD;AADe,CAArB;AAUP,MAAMC,QAAQ,GAAG,UAAjB;AACA,MAAMC,SAAS,GAAG,WAAlB;AAEA,MAAMC,aAAa,GAAG;AACpBC,EAAAA,IAAI,EAAEH;AADc,CAAtB;AAGA,MAAMI,cAAc,GAAG;AACrBD,EAAAA,IAAI,EAAEF,SADe;AAErBI,EAAAA,IAAI,EAAE;AACJN,IAAAA,OAAO,EAAE,OADL;AAEJF,IAAAA,EAAE,EAAE,CAFA;AAGJD,IAAAA,IAAI,EAAE;AACJE,MAAAA,QAAQ,EAAE;AADN;AAHF;AAFe,CAAvB;;AAWA,MAAMQ,OAAO,GAAG,CAACC,KAAK,GAAGb,YAAT,EAAuBc,MAAvB,KAAkC;AAChD,UAAOA,MAAM,CAACL,IAAd;AACE,SAAKH,QAAL;AAAe;AACb,iCACKO,KADL;AAGD;;AAED,SAAKN,SAAL;AAAgB;AACd,+CACKM,KADL;AAEEZ,UAAAA,SAAS,EAAE,CAAEa,MAAM,CAACH,IAAT,EAAe,GAAGE,KAAK,CAACZ,SAAxB;AAFb;AAID;;AACD;AAAS;AACP,iCACKY,KADL;AAGD;AAjBH;AAmBD,CApBD;;AAsBA,eAAeD,OAAf","sourcesContent":["export const initialState = {\n  mainPosts: [{\n    user: {\n      id: 1,\n      nickname: 'ykwimk',\n    },\n    content: 'asdfdasf'\n  }]\n}\n\nconst ADD_POST = 'ADD_POST'\nconst ADD_DUMMY = 'ADD_DUMMY'\n\nconst addPostAction = {\n  type: ADD_POST,\n}\nconst addDummyAction = {\n  type: ADD_DUMMY,\n  data: {\n    content: 'hello',\n    id: 1,\n    user: {\n      nickname: 'ykwimk'\n    }\n  }\n}\n\nconst reducer = (state = initialState, action) => {\n  switch(action.type) {\n    case ADD_POST: {\n      return {\n        ...state\n      }\n    }\n\n    case ADD_DUMMY: {\n      return {\n        ...state,\n        mainPosts: [ action.data, ...state.mainPosts ]\n      }\n    }\n    default: {\n      return {\n        ...state\n      }\n    }\n  }\n}\n\nexport default reducer;"]},"metadata":{},"sourceType":"module"}