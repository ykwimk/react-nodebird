{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(loginApi),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(login),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(watchLogin),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(userSaga);\n\nimport { all, call, takeLatest, fork, put } from \"redux-saga/effects\";\nimport { LOG_IN, LOG_IN_SUCCESS, LOG_IN_FAIL } from \"../reducers/user\";\n\nfunction loginApi() {\n  return _regeneratorRuntime.wrap(function loginApi$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}\n\nfunction login() {\n  return _regeneratorRuntime.wrap(function login$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return call(loginApi);\n\n        case 3:\n          _context2.next = 5;\n          return put({\n            type: LOG_IN_SUCCESS\n          });\n\n        case 5:\n          _context2.next = 12;\n          break;\n\n        case 7:\n          _context2.prev = 7;\n          _context2.t0 = _context2[\"catch\"](0);\n          console.log(_context2.t0);\n          _context2.next = 12;\n          return put({\n            type: LOG_IN_FAIL\n          });\n\n        case 12:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 7]]);\n}\n\nfunction watchLogin() {\n  return _regeneratorRuntime.wrap(function watchLogin$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return takeLatest(LOG_IN, login);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}\n\nexport default function userSaga() {\n  return _regeneratorRuntime.wrap(function userSaga$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return all([fork(watchLogin)]);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}","map":{"version":3,"sources":["/Users/robin/www/react-nodebird/front/sagas/user.js"],"names":["loginApi","login","watchLogin","userSaga","all","call","takeLatest","fork","put","LOG_IN","LOG_IN_SUCCESS","LOG_IN_FAIL","type","console","log"],"mappings":";;oDAGUA,Q;qDAIAC,K;qDAcAC,U;qDAIeC,Q;;AAzBzB,SAASC,GAAT,EAAcC,IAAd,EAAoBC,UAApB,EAAgCC,IAAhC,EAAsCC,GAAtC,QAAiD,oBAAjD;AACA,SAASC,MAAT,EAAiBC,cAAjB,EAAiCC,WAAjC,QAAoD,kBAApD;;AAEA,SAAUX,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,SAAUC,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEI,iBAAMI,IAAI,CAACL,QAAD,CAAV;;AAFJ;AAAA;AAGI,iBAAMQ,GAAG,CAAC;AACRI,YAAAA,IAAI,EAAEF;AADE,WAAD,CAAT;;AAHJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAOIG,UAAAA,OAAO,CAACC,GAAR;AAPJ;AAQI,iBAAMN,GAAG,CAAC;AACRI,YAAAA,IAAI,EAAED;AADE,WAAD,CAAT;;AARJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAcA,SAAUT,UAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMI,UAAU,CAACG,MAAD,EAASR,KAAT,CAAhB;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,eAAe,SAAUE,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACb,iBAAMC,GAAG,CAAC,CACRG,IAAI,CAACL,UAAD,CADI,CAAD,CAAT;;AADa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { all, call, takeLatest, fork, put } from \"redux-saga/effects\";\nimport { LOG_IN, LOG_IN_SUCCESS, LOG_IN_FAIL } from \"../reducers/user\";\n\nfunction* loginApi() {\n  // 서버 요청\n}\n\nfunction* login() {\n  try {\n    yield call(loginApi)\n    yield put({\n      type: LOG_IN_SUCCESS\n    })\n  } catch(e) {\n    console.log(e)\n    yield put({\n      type: LOG_IN_FAIL\n    })\n  }\n}\n\nfunction* watchLogin() {\n  yield takeLatest(LOG_IN, login)\n}\n\nexport default function* userSaga() {\n  yield all([\n    fork(watchLogin),\n  ])\n}"]},"metadata":{},"sourceType":"module"}